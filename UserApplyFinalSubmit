import React, { useState } from "react";
import "../style/LoanApplicationForm.css"; // ye change krna pdega 
import HeaderLoggedIn from "./HeaderLoggedIn";
import Footer from "./FooterLoggedIn";

const LoanApplicationForm = () => {
  // Step management & UI state
  const [currentStep, setCurrentStep] = useState(1);
  const [completedSteps, setCompletedSteps] = useState(new Set());
  const [showReview, setShowReview] = useState(false);
  const [allSectionsCompleted, setAllSectionsCompleted] = useState(false);
  const [editingSection, setEditingSection] = useState(null);
  const [loading, setLoading] = useState(false);

  const steps = [
    { id: 1, title: "Personal Details", key: "personal" },
    { id: 2, title: "Employment Details", key: "employment" },
    { id: 3, title: "Loan Details", key: "loan" },
    { id: 4, title: "Document Upload", key: "documents" },
    { id: 5, title: "Existing Loans", key: "existing" },
    { id: 6, title: "References", key: "references" },
    { id: 7, title: "Review Application", key: "review" },
  ];

  // initial form data
  const initialFormData = {
    fullName: "",
    phoneNumber: "",
    maritalStatus: "",
    panNumber: "",
    passportNumber: "",
    gender: "",
    currentAddress: "",
    permanentAddress: "",
    dateOfBirth: "",

    occupationType: "",
    totalWorkExperience: "",
    monthlyCompanyIncome: "",
    unemploymentIncome: "",
    companyName: "",
    officeAddress: "",

    loanType: "",
    loanAmount: "",
    loanDuration: "",
    loanPurpose: "",

    existingLoanFullName: "",
    existingLoanType: "",
    existingLoanContactNumber: "",
    existingLoanLender: "",
    existingLoanEmail: "",
    existingLoanOutstandingAmount: "",
    existingLoanAddress: "",
    existingLoanEMITenure: "",

    referenceFullName: "",
    referenceRelationship: "",
    referenceContactNumber: "",
    referenceAddress: "",
  };

  const [formData, setFormData] = useState(initialFormData);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [uploadedFiles, setUploadedFiles] = useState({
    panCard: null,
    aadharCard: null,
    salarySlips: [],
    bankStatements: [],
    photo: null,
  });

  // API calls - only called on final submit (step 7)
  const createApplication = async () => {
    const response = await fetch("http://localhost:8080/api/applications/create", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });
    if (!response.ok) throw new Error("Failed to create application");
    return await response.json(); // assume { id: ... }
  };

  const savePersonalDetails = async (applicationId, data) => {
    const personalData = {
      fullName: data.fullName || "",
      phoneNumber: data.phoneNumber || "",
      maritalStatus: data.maritalStatus || "",
      panNumber: data.panNumber || "",
      passportNumber: data.passportNumber || "",
      gender: data.gender || "",
      currentAddress: data.currentAddress || "",
      permanentAddress: data.permanentAddress || "",
      dateOfBirth: data.dateOfBirth || "",
    };

    const response = await fetch(
      `http://localhost:8080/api/applications/${applicationId}/personal-details`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(personalData),
      }
    );
    if (!response.ok) throw new Error("Failed to save personal details");
    return await response.json();
  };

  const saveEmploymentDetails = async (applicationId, data) => {
    const employmentData = {
      employmentType: data.occupationType || "",
      employerName: data.companyName || "",
      jobTitle: "Not specified",
      monthlyIncome: parseFloat(data.monthlyCompanyIncome) || 0,
      unemploymentIncome: parseFloat(data.unemploymentIncome) || 0,
      yearsOfExperience: parseFloat(data.totalWorkExperience) || 0,
      officeAddress: data.officeAddress || "",
    };

    const response = await fetch(
      `http://localhost:8080/api/applications/${applicationId}/employment-details`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(employmentData),
      }
    );
    if (!response.ok) throw new Error("Failed to save employment details");
    return await response.json();
  };

  const saveLoanDetails = async (applicationId, data) => {
    const loanData = {
      loanType: data.loanType || "",
      loanAmount: parseFloat(data.loanAmount) || 0,
      loanTenure: parseInt(data.loanDuration) || 0,
      loanPurpose: data.loanPurpose || "",
    };

    const response = await fetch(
      `http://localhost:8080/api/applications/${applicationId}/loan-details`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(loanData),
      }
    );
    if (!response.ok) throw new Error("Failed to save loan details");
    return await response.json();
  };

  const saveDocumentDetails = async (applicationId, files) => {
    const documentData = {
      panCardPath: files.panCard ? files.panCard.name : null,
      aadhaarCardPath: files.aadharCard ? files.aadharCard.name : null,
      salarySlipPaths:
        files.salarySlips && files.salarySlips.length ? files.salarySlips.map((f) => f.name) : [],
      bankStatementPaths:
        files.bankStatements && files.bankStatements.length
          ? files.bankStatements.map((f) => f.name)
          : [],
      photoPath: files.photo ? files.photo.name : null,
    };

    const response = await fetch(
      `http://localhost:8080/api/applications/${applicationId}/document-details`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(documentData),
      }
    );
    if (!response.ok) throw new Error("Failed to save document details");
    return await response.json();
  };

  const saveExistingLoanDetails = async (applicationId, data) => {
    if (!data.existingLoanFullName && !data.existingLoanType && !data.existingLoanLender) {
      return { message: "No existing loan data" };
    }

    const existingLoanData = {
      fullName: data.existingLoanFullName || "",
      loanType: data.existingLoanType || "",
      contactNumber: data.existingLoanContactNumber || "",
      lender: data.existingLoanLender || "",
      email: data.existingLoanEmail || "",
      outstandingAmount: data.existingLoanOutstandingAmount
        ? parseFloat(data.existingLoanOutstandingAmount)
        : null,
      address: data.existingLoanAddress || "",
      emiTenure: data.existingLoanEMITenure ? parseInt(data.existingLoanEMITenure) : null,
    };

    const response = await fetch(
      `http://localhost:8080/api/applications/${applicationId}/existing-loan-details`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(existingLoanData),
      }
    );
    if (!response.ok) throw new Error("Failed to save existing loan details");
    return await response.json();
  };

  const saveReferenceDetails = async (applicationId, data) => {
    const referenceData = {
      fullName: data.referenceFullName || "",
      relationshipWithApplicant: data.referenceRelationship || "",
      contactNumber: data.referenceContactNumber || "",
      address: data.referenceAddress || "",
    };

    const response = await fetch(
      `http://localhost:8080/api/applications/${applicationId}/reference-details`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(referenceData),
      }
    );
    if (!response.ok) throw new Error("Failed to save reference details");
    return await response.json();
  };

  // Validation functions remain same...

  // ---------------- VALIDATION ----------------
  const validateField = (name, value) => {
    let error = "";

    switch (name) {
      case "fullName":
        if (!value || !value.trim()) error = "Full name is required";
        else if (value.trim().length < 2) error = "Name must be at least 2 characters";
        break;
      case "phoneNumber":
        if (!value || !value.trim()) error = "Phone number is required";
        else if (!/^\d{10}$/.test(value.replace(/\D/g, ""))) error = "Please enter a valid 10-digit phone number";
        break;
      case "panNumber":
        if (!value || !value.trim()) error = "PAN number is required";
        else if (!/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/.test(value.toUpperCase())) error = "Please enter a valid PAN number";
        break;
      case "currentAddress":
        if (!value || !value.trim()) error = "Current address is required";
        else if (value.trim().length < 10) error = "Please enter a complete address";
        break;
      case "permanentAddress":
        if (!value || !value.trim()) error = "Permanent address is required";
        else if (value.trim().length < 10) error = "Please enter a complete address";
        break;
      case "dateOfBirth":
        if (!value || !value.trim()) error = "Date of birth is required";
        break;
      case "maritalStatus":
        if (!value || !value.trim()) error = "Marital status is required";
        break;
      case "gender":
        if (!value || !value.trim()) error = "Gender is required";
        break;
      case "occupationType":
        if (!value || !value.trim()) error = "Occupation type is required";
        break;
      case "companyName":
        if (!value || !value.trim()) error = "Company name is required";
        break;
      case "totalWorkExperience":
        if (!value || !value.trim()) error = "Work experience is required";
        else if (isNaN(parseFloat(value)) || parseFloat(value) < 0) error = "Total work experience should be a valid number";
        break;
      case "monthlyCompanyIncome":
        if (!value || !value.toString().trim()) error = "Monthly income is required";
        else if (isNaN(value) || parseFloat(value) < 0) error = "Please enter a valid income amount";
        break;
      case "officeAddress":
        if (!value || !value.trim()) error = "Office address is required";
        break;
      case "loanType":
        if (!value || !value.trim()) error = "Loan type is required";
        break;
      case "loanAmount":
        if (!value || !value.toString().trim()) error = "Loan amount is required";
        else if (isNaN(value) || parseFloat(value) <= 0) error = "Please enter a valid amount";
        break;
      case "loanDuration":
        if (!value || !value.toString().trim()) error = "Loan duration is required";
        break;
      case "loanPurpose":
        if (!value || !value.trim()) error = "Loan purpose is required";
        break;
      case "existingLoanEmail":
        if (value && value.trim()) {
          const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
          if (!emailRegex.test(value.trim())) error = "Please enter a valid email address";
        }
        break;
      case "referenceFullName":
        if (!value || !value.trim()) error = "Reference name is required";
        break;
      case "referenceContactNumber":
        if (!value || !value.trim()) error = "Reference contact is required";
        else if (!/^\d{10}$/.test(value.replace(/\D/g, ""))) error = "Please enter a valid 10-digit phone number";
        break;
      case "referenceRelationship":
        if (!value || !value.trim()) error = "Relationship is required";
        break;
      case "referenceAddress":
        if (!value || !value.trim()) error = "Reference address is required";
        break;
      default:
        break;
    }

    return error;
  };

  const validateStep = (stepKey) => {
    const stepErrors = {};
    let isValid = true;

    switch (stepKey) {
      case "personal": {
        const personalFields = ["fullName", "phoneNumber", "panNumber", "currentAddress", "permanentAddress", "dateOfBirth", "maritalStatus", "gender"];
        personalFields.forEach((field) => {
          const error = validateField(field, formData[field]);
          if (error) {
            stepErrors[field] = error;
            isValid = false;
          }
        });
        break;
      }
      case "employment": {
        const employmentFields = ["occupationType", "companyName", "totalWorkExperience", "monthlyCompanyIncome", "officeAddress"];
        employmentFields.forEach((field) => {
          const error = validateField(field, formData[field]);
          if (error) {
            stepErrors[field] = error;
            isValid = false;
          }
        });
        break;
      }
      case "loan": {
        const loanFields = ["loanType", "loanAmount", "loanDuration", "loanPurpose"];
        loanFields.forEach((field) => {
          const error = validateField(field, formData[field]);
          if (error) {
            stepErrors[field] = error;
            isValid = false;
          }
        });
        break;
      }
      case "documents":
        // no strict validation here, optional
        isValid = true;
        break;
      case "existing":
        if (formData["existingLoanEmail"] && formData["existingLoanEmail"].trim() !== "") {
          const emailError = validateField("existingLoanEmail", formData["existingLoanEmail"]);
          if (emailError) {
            stepErrors["existingLoanEmail"] = emailError;
            isValid = false;
          }
        }
        break;
      case "references": {
        const referenceFields = ["referenceFullName", "referenceContactNumber", "referenceRelationship", "referenceAddress"];
        referenceFields.forEach((field) => {
          const error = validateField(field, formData[field]);
          if (error) {
            stepErrors[field] = error;
            isValid = false;
          }
        });
        break;
      }
      default:
        break;
    }

    setErrors((prev) => ({ ...prev, ...stepErrors }));
    return isValid;
  };

  // ---------------- INPUT HANDLERS ----------------
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    if (touched[name]) {
      const error = validateField(name, value);
      setErrors((prev) => ({ ...prev, [name]: error }));
    }
  };

  const handleBlur = (e) => {
    const { name, value } = e.target;
    setTouched((prev) => ({ ...prev, [name]: true }));
    const error = validateField(name, value);
    setErrors((prev) => ({ ...prev, [name]: error }));
  };

  // file upload: supports single and multiple
  const handleFileUpload = (documentType, files) => {
    setUploadedFiles((prev) => {
      const next = { ...prev };
      if (Array.isArray(files)) {
        next[documentType] = files;
      } else {
        next[documentType] = files;
      }
      return next;
    });
  };

  const triggerFileInput = (inputId) => {
    const el = document.getElementById(inputId);
    if (el) el.click();
  };

  // ---------------- STEP NAVIGATION ----------------
  const getStepFields = (stepKey) => {
    switch (stepKey) {
      case "personal":
        return ["fullName", "phoneNumber", "panNumber", "currentAddress", "permanentAddress", "dateOfBirth", "maritalStatus", "gender"];
      case "employment":
        return ["occupationType", "companyName", "totalWorkExperience", "monthlyCompanyIncome", "officeAddress"];
      case "loan":
        return ["loanType", "loanAmount", "loanDuration", "loanPurpose"];
      case "documents":
        return [];
      case "existing":
        return ["existingLoanFullName", "existingLoanType", "existingLoanContactNumber", "existingLoanLender", "existingLoanEmail", "existingLoanOutstandingAmount", "existingLoanAddress", "existingLoanEMITenure"];
      case "references":
        return ["referenceFullName", "referenceContactNumber", "referenceRelationship", "referenceAddress"];
      default:
        return [];
    }
  };

  const handleNextStep = () => {
    const current = steps.find((s) => s.id === currentStep);
    if (validateStep(current.key)) {
      setCompletedSteps((prev) => new Set([...prev, currentStep]));

      if (currentStep === 6) {
        setShowReview(true);
        setCurrentStep(7);
        setAllSectionsCompleted(true);
      } else {
        setCurrentStep((prev) => prev + 1);
      }
    } else {
      const stepFields = getStepFields(current.key);
      const newTouched = {};
      stepFields.forEach((f) => (newTouched[f] = true));
      setTouched((prev) => ({ ...prev, ...newTouched }));
    }
  };

  const handlePrevStep = () => {
    if (currentStep > 1) {
      if (currentStep === 7) {
        setShowReview(false);
        setCurrentStep(6);
      } else {
        setCurrentStep((prev) => prev - 1);
      }
    }
  };

  const handleEditSection = (sectionId) => {
    setEditingSection(sectionId);
    setShowReview(false);
    setCurrentStep(sectionId);
  };

  const handleReturnToReview = () => {
    const current = steps.find((s) => s.id === currentStep);
    if (validateStep(current.key)) {
      setCompletedSteps((prev) => new Set([...prev, currentStep]));
      setEditingSection(null);
      setShowReview(true);
      setCurrentStep(7);
      alert("Section saved locally. Return to review and submit when ready.");
    } else {
      const stepFields = getStepFields(current.key);
      const newTouched = {};
      stepFields.forEach((f) => (newTouched[f] = true));
      setTouched((prev) => ({ ...prev, ...newTouched }));
    }
  };

  // ---------------- FINAL SUBMIT ----------------
  const handleSubmit = async (e) => {
    if (e) e.preventDefault();

    // Validate all required steps before submission
    const requiredSteps = steps.slice(0, 6);
    for (const step of requiredSteps) {
      if (!validateStep(step.key)) {
        setCurrentStep(step.id);
        alert("Please complete all required fields before submitting.");
        return;
      }
    }

    try {
      setLoading(true);

      // 1) Create application
      const app = await createApplication();
      const applicationId = app.id;
      if (!applicationId) throw new Error("No application ID returned from server");

      // 2) Save all sections data sequentially
      await savePersonalDetails(applicationId, formData);
      await saveEmploymentDetails(applicationId, formData);
      await saveLoanDetails(applicationId, formData);
      await saveDocumentDetails(applicationId, uploadedFiles);
      await saveExistingLoanDetails(applicationId, formData);
      await saveReferenceDetails(applicationId, formData);

      alert("Application submitted successfully!");

      // Reset all local states
      setFormData(initialFormData);
      setUploadedFiles({
        panCard: null,
        aadharCard: null,
        salarySlips: [],
        bankStatements: [],
        photo: null,
      });
      setCompletedSteps(new Set());
      setShowReview(false);
      setAllSectionsCompleted(false);
      setEditingSection(null);
      setCurrentStep(1);
    } catch (err) {
      console.error("Error during final submit:", err);
      alert("There was an error submitting your application. Please try again.");
    } finally {
      setLoading(false);
    }
  };
    // ---------------- RENDER HELPERS ----------------
  const renderProgressBar = () => {
    return (
      <div className="progress-container">
        <div className="progress-bar">
          {steps.map((step, index) => (
            <div key={step.id} className="progress-step">
              <div
                className={`step-circle ${
                  currentStep === step.id
                    ? "active"
                    : completedSteps.has(step.id)
                    ? "completed"
                    : "pending"
                }`}
              >
                {completedSteps.has(step.id) ? "✓" : step.id}
              </div>
              <div className="step-label">{step.title}</div>
              {index < steps.length - 1 && (
                <div
                  className={`step-connector ${
                    completedSteps.has(step.id) ? "completed" : "pending"
                  }`}
                ></div>
              )}
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Personal Details
  const renderPersonalDetails = () => (
    <section className="form-section">
      <h2>Personal Details</h2>
      <div className="form-grid">
        <div className="form-group">
          <label>Full Name:</label>
          <input
            type="text"
            name="fullName"
            value={formData.fullName}
            onChange={handleInputChange}
            onBlur={handleBlur}
            placeholder="Type here"
            className={`form-input ${
              touched.fullName && errors.fullName ? "error" : ""
            }`}
            required
          />
          {touched.fullName && errors.fullName && (
            <small className="error-text">{errors.fullName}</small>
          )}
        </div>

        <div className="form-group">
          <label>Phone Number:</label>
          <input
            type="tel"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleInputChange}
            onBlur={handleBlur}
            placeholder="Type here"
            className={`form-input ${
              touched.phoneNumber && errors.phoneNumber ? "error" : ""
            }`}
            required
          />
          {touched.phoneNumber && errors.phoneNumber && (
            <small className="error-text">{errors.phoneNumber}</small>
          )}
        </div>

        <div className="form-group">
          <label>Marital Status:</label>
          <select
            name="maritalStatus"
            value={formData.maritalStatus}
            onChange={handleInputChange}
            onBlur={handleBlur}
            className={`form-input ${
              touched.maritalStatus && errors.maritalStatus ? "error" : ""
            }`}
            required
          >
            <option value="">Select Status</option>
            <option value="single">Single</option>
            <option value="married">Married</option>
            <option value="divorced">Divorced</option>
            <option value="widowed">Widowed</option>
          </select>
          {touched.maritalStatus && errors.maritalStatus && (
            <small className="error-text">{errors.maritalStatus}</small>
          )}
        </div>

        <div className="form-group">
          <label>PAN Number:</label>
          <input
            type="text"
            name="panNumber"
            value={formData.panNumber}
            onChange={handleInputChange}
            onBlur={handleBlur}
            placeholder="ABCDE1234F"
            className={`form-input ${
              touched.panNumber && errors.panNumber ? "error" : ""
            }`}
            required
          />
          {touched.panNumber && errors.panNumber && (
            <small className="error-text">{errors.panNumber}</small>
          )}
        </div>

        <div className="form-group">
          <label>Passport Number:</label>
          <input
            type="text"
            name="passportNumber"
            value={formData.passportNumber}
            onChange={handleInputChange}
            onBlur={handleBlur}
            placeholder="Type here"
            className="form-input"
          />
        </div>

        <div className="form-group">
          <label>Gender:</label>
          <select
            name="gender"
            value={formData.gender}
            onChange={handleInputChange}
            onBlur={handleBlur}
            className={`form-input ${
              touched.gender && errors.gender ? "error" : ""
            }`}
            required
          >
            <option value="">Select Gender</option>
            <option value="male">Male</option>
            <option value="female">Female</option>
            <option value="other">Other</option>
          </select>
          {touched.gender && errors.gender && (
            <small className="error-text">{errors.gender}</small>
          )}
        </div>

        <div className="form-group">
          <label>Current Address:</label>
          <textarea
            name="currentAddress"
            value={formData.currentAddress}
            onChange={handleInputChange}
            onBlur={handleBlur}
            placeholder="Type here"
            className={`form-input ${
              touched.currentAddress && errors.currentAddress ? "error" : ""
            }`}
            required
          />
          {touched.currentAddress && errors.currentAddress && (
            <small className="error-text">{errors.currentAddress}</small>
          )}
        </div>

        <div className="form-group">
          <label>Permanent Address:</label>
          <textarea
            name="permanentAddress"
            value={formData.permanentAddress}
            onChange={handleInputChange}
            onBlur={handleBlur}
            placeholder="Type here"
            className={`form-input ${
              touched.permanentAddress && errors.permanentAddress ? "error" : ""
            }`}
            required
          />
          {touched.permanentAddress && errors.permanentAddress && (
            <small className="error-text">{errors.permanentAddress}</small>
          )}
        </div>

        <div className="form-group">
          <label>Date of Birth:</label>
          <input
            type="date"
            name="dateOfBirth"
            value={formData.dateOfBirth}
            onChange={handleInputChange}
            onBlur={handleBlur}
            max={new Date().toISOString().split("T")[0]}
            className={`form-input ${
              touched.dateOfBirth && errors.dateOfBirth ? "error" : ""
            }`}
            required
          />
          {touched.dateOfBirth && errors.dateOfBirth && (
            <small className="error-text">{errors.dateOfBirth}</small>
          )}
        </div>
      </div>
    </section>
  );

  // Similarly add renderEmploymentDetails, renderLoanDetails, renderDocumentUpload, renderExistingLoans,
  // renderReferences, renderReviewApplication with logic exactly as in your original code provided.

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1:
        return renderPersonalDetails();
      case 2:
        return renderEmploymentDetails();
      case 3:
        return renderLoanDetails();
      case 4:
        return renderDocumentUpload();
      case 5:
        return renderExistingLoans();
      case 6:
        return renderReferences();
      case 7:
        return renderReviewApplication();
      default:
        return null;
    }
  };

  // ---------------- FINAL RENDER ----------------
  return (
    <div className="loan-application-container">
      <HeaderLoggedIn />
      <main className="application-main">
        <div className="container">
          <div className="application-header">
            <h1>Loan Application Form</h1>
            <p>Please fill out all the required information below</p>
          </div>

          {renderProgressBar()}

          <form className="loan-form" onSubmit={handleSubmit}>
            {renderCurrentStep()}

            <div className="form-navigation">
              <div className="nav-buttons">
                {currentStep > 1 && currentStep !== 7 && (
                  <button
                    type="button"
                    onClick={handlePrevStep}
                    className="nav-btn prev-btn"
                    disabled={loading}
                  >
                    ← Previous
                  </button>
                )}

                {editingSection ? (
                  <button
                    type="button"
                    onClick={handleReturnToReview}
                    className="nav-btn next-btn"
                    style={{ backgroundColor: "#4CAF50" }}
                    disabled={loading}
                  >
                    {loading ? "Saving..." : "Save & Return to Review"}
                  </button>
                ) : currentStep < 6 ? (
                  <button
                    type="button"
                    onClick={handleNextStep}
                    className="nav-btn next-btn"
                    disabled={loading}
                  >
                    {loading ? "Saving..." : "Next →"}
                  </button>
                ) : currentStep === 6 ? (
                  <button
                    type="button"
                    onClick={handleNextStep}
                    className="nav-btn next-btn"
                    style={{ backgroundColor: "#4CAF50" }}
                    disabled={loading}
                  >
                    {loading ? "Saving..." : "Review Application →"}
                  </button>
                ) : (
                  <button
                    type="submit"
                    className="nav-btn submit-btn"
                    disabled={loading}
                  >
                    {loading ? "Submitting..." : "Submit Application"}
                  </button>
                )}
              </div>

              <div className="step-indicator">
                {currentStep <= 6 ? `Step ${currentStep} of 6` : "Final Review"}
              </div>
            </div>
          </form>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default LoanApplicationForm;

